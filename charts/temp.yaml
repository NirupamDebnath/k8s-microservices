---
# Source: k8s-microservices/templates/svc-A.yaml
apiVersion: v1
kind: Service
metadata:
  name: svc-a
spec:
  selector:
    app: svc-a
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
---
# Source: k8s-microservices/templates/svc-Auth.yaml
apiVersion: v1
kind: Service
metadata:
  name: svc-auth
spec:
  selector:
    app: svc-auth
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
---
# Source: k8s-microservices/templates/svc-A.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: svc-a-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: svc-a
  template:
    metadata:
      labels:
        app: svc-a
    spec:
      containers:
      - name: svc-a
        image: svc-a:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
---
# Source: k8s-microservices/templates/svc-Auth.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: svc-auth-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: svc-auth
  template:
    metadata:
      labels:
        app: svc-auth
    spec:
      containers:
      - name: svc-auth
        image: svc-auth:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
---
# Source: k8s-microservices/templates/authorizationPolicy.yaml
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: svc-a-allow
spec:
  selector:
    matchLabels:
      app: svc-a
  action: DENY
  rules:
    - when:
        - key: request.headers[x-jwt-claim-username]
          notValues: ["*"]
---
# Source: k8s-microservices/templates/authorizationPolicy.yaml
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: svc-a-audit
spec:
  selector:
    matchLabels:
      app: svc-a
  action: AUDIT
  rules:
  - {}
---
# Source: k8s-microservices/templates/requestAuthentication.yaml
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: svc-a
spec:
  selector:
    matchLabels:
      app: svc-a
  jwtRules:
  - issuer: "http://localhost:3000"
    jwksUri: "http://svc-auth.default.svc.cluster.local/.well-known/jwks.json"
    outputClaimToHeaders:
    - header: "x-jwt-claim-username"
      claim: "username"
---
# Source: k8s-microservices/templates/svc-A.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: svc-a
spec:
  hosts:
    - "*"
  gateways:
    - istio-system/default
  http:
  - match:
      - uri:
          prefix: /
    route:
      - destination:
          host: svc-a
          port:
            number: 80
---
# Source: k8s-microservices/templates/svc-Auth.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: svc-auth
spec:
  hosts:
    - "*"
  gateways:
    - istio-system/default
  http:
  - match:
      - uri:
          prefix: /
    route:
      - destination:
          host: svc-auth
          port:
            number: 80
---
# Source: k8s-microservices/templates/svc-A.yaml
apiVersion: v1
kind: Service
metadata:
  name: svc-a
spec:
  selector:
    app: svc-a
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
---
# Source: k8s-microservices/templates/svc-Auth.yaml
apiVersion: v1
kind: Service
metadata:
  name: svc-auth
spec:
  selector:
    app: svc-auth
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
---
# Source: k8s-microservices/templates/svc-A.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: svc-a-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: svc-a
  template:
    metadata:
      labels:
        app: svc-a
    spec:
      containers:
      - name: svc-a
        image: svc-a:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
---
# Source: k8s-microservices/templates/svc-Auth.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: svc-auth-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: svc-auth
  template:
    metadata:
      labels:
        app: svc-auth
    spec:
      containers:
      - name: svc-auth
        image: svc-auth:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
---
# Source: k8s-microservices/templates/authorizationPolicy.yaml
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: svc-a-allow
spec:
  selector:
    matchLabels:
      app: svc-a
  action: DENY
  rules:
    - when:
        - key: request.headers[x-jwt-claim-username]
          notValues: ["*"]
---
# Source: k8s-microservices/templates/authorizationPolicy.yaml
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: svc-a-audit
spec:
  selector:
    matchLabels:
      app: svc-a
  action: AUDIT
  rules:
  - {}
---
# Source: k8s-microservices/templates/requestAuthentication.yaml
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: svc-a
spec:
  selector:
    matchLabels:
      app: svc-a
  jwtRules:
  - issuer: "http://localhost:3000"
    jwksUri: "http://svc-auth.default.svc.cluster.local/.well-known/jwks.json"
    outputClaimToHeaders:
    - header: "x-jwt-claim-username"
      claim: "username"
---
# Source: k8s-microservices/templates/svc-A.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: svc-a
spec:
  hosts:
    - "*"
  gateways:
    - istio-system/default
  http:
  - match:
      - uri:
          prefix: /
    route:
      - destination:
          host: svc-a
          port:
            number: 80
---
# Source: k8s-microservices/templates/svc-Auth.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: svc-auth
spec:
  hosts:
    - "*"
  gateways:
    - istio-system/default
  http:
  - match:
      - uri:
          prefix: /
    route:
      - destination:
          host: svc-auth
          port:
            number: 80
